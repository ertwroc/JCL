package com.github.ertwroc.jcl.translator;

import java.util.List;
import org.eclipse.ocl.cst.*;

public interface IOclToString {
	public String generateCSTNode();
	public String generateBooleanLiteralExpCS(BooleanLiteralExpCS context , String booleanSymbol, String symbol);
	public String generateCallExpCS(CallExpCS context , String source, String accessor, String simpleNameCS);
	public String generateClassifierContextDeclCS(ClassifierContextDeclCS context , String pathNameCS, String invOrDefCS, List<String> constraints);
	public String generateCollectionLiteralExpCS(CollectionLiteralExpCS context , String collectionType, List<String> collectionLiteralParts);
	public String generateCollectionLiteralPartCS(CollectionLiteralPartCS context , String expressionCS);
	public String generateCollectionRangeCS(CollectionRangeCS context , String lastExpressionCS, String expressionCS);
	public String generateCollectionTypeCS(CollectionTypeCS context , String collectionTypeIdentifier, String typeCS);
	public String generateContextDeclCS(ContextDeclCS context );
	public String generateDefCS(DefCS context , String defExpressionCS, String simpleNameCS, String invOrDefCS);
	public String generateDefExpressionCS(DefExpressionCS context , String operationCS, String variableCS, String expressionCS);
	public String generateDerValueCS(DerValueCS context , String initOrDerValueCS, String expressionCS);
	public String generateEnumLiteralExpCS(EnumLiteralExpCS context , String pathNameCS, String simpleNameCS);
	public String generateFeatureCallExpCS(FeatureCallExpCS context , List<String> arguments, String isMarkedPreCS, String source, String accessor, String simpleNameCS);
	public String generateIfExpCS(IfExpCS context , String thenExpression, String elseExpression, String condition);
	public String generateInitOrDerValueCS(InitOrDerValueCS context , String initOrDerValueCS, String expressionCS);
	public String generateInitValueCS(InitValueCS context , String initOrDerValueCS, String expressionCS);
	public String generateIntegerLiteralExpCS(IntegerLiteralExpCS context , String integerSymbol, String symbol);
	public String generateInvalidLiteralExpCS(InvalidLiteralExpCS context , String symbol);
	public String generateInvCS(InvCS context , String expressionCS, String simpleNameCS, String invOrDefCS);
	public String generateInvOrDefCS(InvOrDefCS context , String simpleNameCS, String invOrDefCS);
	public String generateIsMarkedPreCS(IsMarkedPreCS context , String re);
	public String generateIterateExpCS(IterateExpCS context , String variable1, String variable2, String body, String source, String accessor, String simpleNameCS);
	public String generateIteratorExpCS(IteratorExpCS context , String variable1, String variable2, String body, String source, String accessor, String simpleNameCS);
	public String generateLetExpCS(LetExpCS context , List<String> variables, String inExpression);
	public String generateLiteralExpCS(LiteralExpCS context );
	public String generateLoopExpCS(LoopExpCS context , String variable1, String variable2, String body, String source, String accessor, String simpleNameCS);
	public String generateMessageExpCS(MessageExpCS context , String target, String kind, String simpleNameCS, List<String> arguments);
	public String generateNullLiteralExpCS(NullLiteralExpCS context , String symbol);
	public String generateOCLDocumentCS(OCLDocumentCS context , List<String> packageDeclarations);
	public String generateOCLExpressionCS(OCLExpressionCS context );
	public String generateOCLMessageArgCS(OCLMessageArgCS context , String typeCS, String expression);
	public String generateOperationCallExpCS(OperationCallExpCS context );
	public String generateOperationContextDeclCS(OperationContextDeclCS context , String operationCS, List<String> prePostOrBodyDecls);
	public String generateOperationCS(OperationCS context , String pathNameCS, String simpleNameCS, List<String> parameters, String typeCS);
	public String generatePackageDeclarationCS(PackageDeclarationCS context , String pathNameCS, List<String> contextDecls, String packageDeclarationCS);
	public String generatePathNameCS(PathNameCS context , List<String> sequenceOfNames);
	public String generatePrePostOrBodyDeclCS(PrePostOrBodyDeclCS context , String kind, String simpleNameCS, String expressionCS);
	public String generatePrimitiveLiteralExpCS(PrimitiveLiteralExpCS context , String symbol);
	public String generatePrimitiveTypeCS(PrimitiveTypeCS context , String value, String type);
	public String generatePropertyContextCS(PropertyContextCS context , String pathNameCS, String simpleNameCS, String typeCS, String initOrDerValueCS);
	public String generateRealLiteralExpCS(RealLiteralExpCS context , String realSymbol, String symbol);
	public String generateSimpleNameCS(SimpleNameCS context , String value, String type);
	public String generateStateExpCS(StateExpCS context , List<String> sequenceOfNames);
	public String generateStringLiteralExpCS(StringLiteralExpCS context , String stringSymbol, String unescapedStringSymbol, String symbol);
	public String generateTupleLiteralExpCS(TupleLiteralExpCS context , List<String> variables);
	public String generateTupleTypeCS(TupleTypeCS context , List<String> variables);
	public String generateTypeCS(TypeCS context );
	public String generateUnlimitedNaturalLiteralExpCS(UnlimitedNaturalLiteralExpCS context , String integerSymbol, String symbol);
	public String generateVariableCS(VariableCS context , String name, String typeCS, String initExpression);
	public String generateVariableExpCS(VariableExpCS context , List<String> arguments, String simpleNameCS, String isMarkedPreCS);
	public String generateSimpleTypeEnum(SimpleTypeEnum simpleTypeEnum);
	public String generatePrePostOrBodyEnum(PrePostOrBodyEnum prePostOrBodyEnum);
	public String translateMessageExpKind(MessageExpKind messageExpKind);
	public String generateCollectionTypeIdentifierEnum(CollectionTypeIdentifierEnum collectionTypeIdentifierEnum);
	public String generateDotOrArrowEnum(DotOrArrowEnum dotOrArrowEnum);
	public String generateMessageExpKind(MessageExpKind messageExpKind);
}